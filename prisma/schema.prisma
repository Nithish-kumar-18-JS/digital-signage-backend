generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  HTML
  RSS
  DOCUMENT
}

enum ScreenStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

enum ScreenOrientation {
  LANDSCAPE
  PORTRAIT
}

model User {
  id               Int        @id @default(autoincrement())
  clerkId          String     @unique
  email            String     @unique
  firstName        String?
  lastName         String?
  role             UserRole   @default(VIEWER)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime?  @updatedAt
  uploadedMedia    Media[]
  createdPlaylists Playlist[]
}

model Media {
  id              Int            @id @default(autoincrement())
  name            String
  type            MediaType
  url             String
  durationSeconds Int            @default(10)
  uploadedById    Int // ðŸ”„ Changed from String â†’ Int
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  uploadedBy      User           @relation(fields: [uploadedById], references: [id])
  playlistItems   PlaylistItem[]
}

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdById Int // ðŸ”„ Changed from String â†’ Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy                 User                       @relation(fields: [createdById], references: [id])
  items                     PlaylistItem[]
  playlistOnScreenPlaylists PlaylistOnScreenPlaylist[]
}

model PlaylistItem {
  id               Int     @id @default(autoincrement())
  playlistId       Int
  mediaId          Int
  position         Int
  durationOverride Int?
  transitionEffect String?

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  media    Media    @relation(fields: [mediaId], references: [id])
}

model Setting {
  id        Int      @id @default(autoincrement())
  screenId  Int
  key       String
  value     String
  updatedAt DateTime @updatedAt
  screen    Screen   @relation(fields: [screenId], references: [id])
}

model Screen {
  id            Int                @id @default(autoincrement())
  name          String
  location      String?
  status        ScreenStatus       @default(OFFLINE)
  lastSeen      DateTime?
  resolution    String?
  orientation   ScreenOrientation  @default(LANDSCAPE)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  createdBy     Int
  playlistLinks PlaylistOnScreen[]
  settings      Setting[]
}

model PlaylistOnScreen {
  id         Int      @id @default(autoincrement())
  screenId   Int
  assignedAt DateTime @default(now())

  startTime   DateTime?
  endTime     DateTime?
  daysOfWeek  String?
  repeatDaily Boolean   @default(true)
  priority    Int       @default(0)

  playlists PlaylistOnScreenPlaylist[]
  screen    Screen                     @relation(fields: [screenId], references: [id])
  createdBy Int

  @@index([screenId, startTime, endTime])
}

model PlaylistOnScreenPlaylist {
  id                 Int @id @default(autoincrement())
  playlistOnScreenId Int
  playlistId         Int

  playlistOnScreen PlaylistOnScreen @relation(fields: [playlistOnScreenId], references: [id], onDelete: Cascade)
  playlist         Playlist         @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}

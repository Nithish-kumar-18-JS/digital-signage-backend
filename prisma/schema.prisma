generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  HTML
  RSS
  DOCUMENT
}

enum ScreenStatus {
  ONLINE
  OFFLINE
  MAINTENANCE
}

enum ScreenOrientation {
  LANDSCAPE
  PORTRAIT
}

model User {
  id               Int         @id @default(autoincrement())
  email            String      @unique
  firstName        String?
  lastName         String?
  password         String?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  uploadedMedia    Media[]
  createdPlaylists Playlist[]
  createdSchedules Schedule[]
  authTokens       AuthToken[] @relation("UserAuthTokens")
}

model AuthToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation("UserAuthTokens", fields: [userId], references: [id], onDelete: Cascade)
}

  model Media {
    id              Int            @id @default(autoincrement())
    name            String
    description     String?
    type            MediaType
    url             String?
    durationSeconds Int?            @default(0)
    uploadedById    Int
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    uploadedBy      User           @relation(fields: [uploadedById], references: [id])
    playlistItems   PlaylistItem[]
  }

model Playlist {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  createdById Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy         User               @relation(fields: [createdById], references: [id])
  items             PlaylistItem[]
  schedulePlaylists SchedulePlaylist[]
}

model PlaylistItem {
  id               Int     @id @default(autoincrement())
  playlistId       Int
  mediaId          Int
  position         Int
  durationOverride Int?
  transitionEffect String?

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  media    Media    @relation(fields: [mediaId], references: [id])
}

model Setting {
  id        Int      @id @default(autoincrement())
  screenId  Int
  key       String
  value     String
  updatedAt DateTime @updatedAt
  screen    Screen   @relation(fields: [screenId], references: [id])
}

model Screen {
  id          Int               @id @default(autoincrement())
  name        String
  description String?
  deviceId    String            @unique
  status      ScreenStatus      @default(OFFLINE)
  lastSeen    DateTime?
  resolution  String?
  orientation ScreenOrientation @default(LANDSCAPE)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  createdBy   Int

  settings  Setting[]
  schedules Schedule[] @relation("ScreenToSchedules")
}

model Schedule {
  id         Int      @id @default(autoincrement())
  screenId   Int
  assignedAt DateTime @default(now())

  startTime         DateTime?
  endTime           DateTime?
  daysOfWeek        String?
  repeatDaily       Boolean            @default(true)
  priority          Int                @default(0)
  createdById       Int
  createdBy         User               @relation(fields: [createdById], references: [id])
  schedulePlaylists SchedulePlaylist[] @relation("ScheduleToItems")
  screen            Screen             @relation("ScreenToSchedules", fields: [screenId], references: [id])
}

model SchedulePlaylist {
  id         Int @id @default(autoincrement())
  scheduleId Int
  playlistId Int

  schedule Schedule @relation("ScheduleToItems", fields: [scheduleId], references: [id], onDelete: Cascade)
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
}
